
raw1 = [
	0xF0, 0x00, 0x48, 0x04, 0x00, 0x00, 0x03, 0x60, 0x01, 
    0x04, 
    0x04, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00,
    0x00, 
    0x00, 
    0xF7
]

raw2 = [
	0xF0, 0x00, 0x48, 0x04, 0x00, 0x00, 0x03, 0x60, 0x02, 
    0x04, 
    0x46, 0x4D, 0x54, 0x43, 0x3C, 0x00, 0x00, 
    0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 
    0x00, 
    0x00, 0x00, 0x46, 0x4D, 0x4E, 0x4D, 0x14, 
    0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 
    0x04, 0x00, 0x00, 0x00, 0x57, 0x47, 0x47, 
    0x02, 
    0x4C, 0x54, 0x50, 0x44, 0x54, 0x18, 0x00, 
    0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
    0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00,
    0x00, 0x32, 0x11, 0x00, 0x00, 0x32, 0x11, 
    0x00, 
    0x00, 0x00, 0x32, 0x11, 0x00, 0x01, 0x3A,
    0x02, 
    0x00, 0x00, 0x64, 0x00, 0x3F, 0x7F, 0x4B, 
    0x00,
    0x00, 0x3F, 0x01, 0x32, 0x00, 0x3F, 0x00,
    0x00,
    0x64, 0x00, 0x3F, 0x00, 0x29, 0x00, 0x41, 
    0x00, 
    0x30, 0x7F, 0x7F, 0x5A, 0x00, 0x2A, 0x00, 
    0x00, 
    0x4B, 0x00, 0x7F, 0x7F, 0x37, 0x00, 0x2C, 
    0x00, 
    0x7A, 0x51, 0x30, 0x7F, 0x7F, 0x37, 0x00, 
    0x00, 
    0x4D, 0x34, 0x4D, 0x30, 0x7F, 0x59, 0x28, 
    0x00,
    0x00, 0x21, 0x00, 0x5F, 0x00, 0x00, 0x00, 
    0x40, 
    0x6E, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
    0x04, 
    0x00, 0x00, 0x05, 0x00, 0x60, 0x00, 0x05,
    0x40, 
    0x50, 0x3F, 0x00, 0x03, 0x1E, 0x00, 0x4A, 
    0x00,
    0x42, 0x00, 0x37, 0x3C, 0x3F, 0x00, 0x00,
    0x00,
    0x37, 0x32, 0x00, 0x00, 0x00, 0x00, 0x7F,
    0x00,
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xF7
]

raw3 = [
	0xF0, 0x00, 0x48, 0x04, 0x00, 0x00, 0x03, 0x60, 0x03, 
    0x20, 
    0x21, 0x74, 0x60, 0x4F, 
    0xF7
]

def convert78(shifts, data):
    if shifts == 0:
        #print("no conversion, return as is")
        return data
    result = []
    #print(len(data))
    for n in range(0, len(data)):
        #print("shifts << (n + 1) is ", hex((shifts << (n + 1)) & 0xFF))
        if (shifts << (n + 1)) & 0x80:
            #print("adding 0x80 to ", hex(data[n]))
            result.append(0x80 | data[n])
        else:
            #print("using just ", hex(data[n]))
            result.append(data[n])
    return result
    
def convert(data):
    result = []
    # first discard the front 9 bytes
    data = data[9:]
    while len(data):
        if data[-1] == 0xf7:
            # if we reached the last byte ditch it
            data = data[:-1]
        # what then follows is a byte holding possible 0x80 shifts for next 7 bytes
        shifts = data[0]
        #print("shifts byte = ", hex(shifts))
        # and then 7 bytes of data
        bytes = data[1 : 8]
        #print("bytes =", [hex(n) for n in bytes])
        next7 = convert78(shifts, bytes)
        #print([hex(n) for n in next7])
        data = data[8:]
        result.extend(next7)
    print()
    return result

#def crc32_2(crc, msg):
#    #crc = 0x00000000
#    for b in msg:
#        crc ^= b
#        for _ in range(8):
#            crc = (crc >> 1) ^ 0xedb88320 if crc & 1 else crc >> 1
#    return crc ^ 0xffffffff

# const Polynomial = 0xedb88320;

# function calcCRC32( bytes, crc )
# {
    # let k;

    # crc = (~crc);
    # for( let i = 0; i < bytes.byteLength; i++ ) {
        # crc = crc ^ bytes[i];
        # for ( k = 0; k < 8; k++ ){
            # crc = ( crc & 1 ) ? ( ( crc >>> 1 ) ^ Polynomial ) : crc >>> 1;
        # }
    # }
    # return (~crc) >>> 0;
# }


#def reverse_bits(n, no_of_bits):
#    result = 0
#    for i in range(no_of_bits):
#        result <<= 1
#        result |= n & 1
#        n >>= 1
#    return result

def crc32(crc, p, len):
  crc = 0xffffffff & ~crc
  for i in range(len):
    crc = crc ^ p[i]
    for j in range(8):
      crc = (crc >> 1) ^ (0xedb88320 & -(crc & 1))
  return 0xffffffff & ~crc

result1 = convert(raw1)
print("result1 is ", len(result1), [hex(n) for n in result1])
result2 = convert(raw2)
#result2.insert(0, 0)
#result2.insert(0, 0)
#result2.insert(0, 0)
#result2.insert(0, 0)
print("result2 is ", len(result2), [hex(n) for n in result2])
for n in result2:
    if n > 31:
        if n < 127:
            print(chr(n), end="")
        else:
            print("#", end="")
    else:
        print('.', end="")
print()
#print(result2)
#binary = bytes(result2)
#crc = crc32_2(0, binary)
#print("CRC =", hex(crc), hex( crc ^ 0xFFFFFFFF), hex(reverse_bits(crc, 32)), hex(reverse_bits(crc ^ 0xFFFFFFFF, 32)))
crc = crc32(0, result2, len(result2))
#print("CRC alt =", hex(crc), hex( crc ^ 0xFFFFFFFF), hex(reverse_bits(crc, 32)), hex(reverse_bits(crc ^ 0xFFFFFFFF, 32)))
print("CRC =", hex(crc))

result3 = convert(raw3)
print("result3 is ", len(result3), [hex(n) for n in result3])
